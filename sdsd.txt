#include "libft.h"

static	int	nbrstr(char const *s, char c)
{
	int	i;
	int	count;

	count = 0;
	i = 0;
	while (s[i])
	{
		while (s[i] == c)
			i++;
		if (i > 0)
		{
			if (s[i - 1] == c)
				count++;
		}
		if(s[i])
			i++;
	}
	if (s[0] != c && count == 0)
		count++;
	if (count == 0 && s[i - 1] == c)
		return (0);
	return (count);
}

static	char	**mallocassign(char **array, char const *s, char c)
{
	int	count;
	int	i;
	int	j;

	count = 0;
	i = 0;
	j = 0;
	while (s[i])
	{
		if (s[i] != c)
			count++;
		else if (i > 0)
		{
			if (s[i - 1] != c)
			{
				array[j++] = (char *)malloc(sizeof(char) *(count + 1));
				if (!array)
					return (0);
				count = 0;
			}
		}
		if (s[i + 1] == '\0' && s[i] != c)
		{
			array[j] = (char *)malloc(sizeof(char) * (count + 1));
			if (!array)
				return (0);
		}
		i++;
	}
	return (array);
}

static	char	**copy(char **array, char const *s, char c)
{
	int	i;
	int	j;
	int	k;

	i = 0;
	j = 0;
	k = 0;
	while (s[i])
	{
		if (s[i] != c)
			array[j][k++] = s[i];
		else if (i > 0)
		{
			if (s[i - 1] != c)
			{	
				array[j++][k] = '\0';
				k = 0;
			}
		}
		if (s[i + 1] == '\0' && s[i] != c)
			array[j][k] = '\0';
		i++;
	}
	return (array);
}

char	**ft_split(char const *s, char c)
{
	int			nmstr;
	char		**array;

	if (!s || !*s)
	{
		array = malloc(sizeof(char *) * 1);
		if (!array)
			return (NULL);
		*array = (void *)0;
		return (array);
	}
	nmstr = nbrstr(s, c);
	if(!nmstr)
		return (NULL);
	array = malloc((nmstr + 1) * sizeof(char *));
	if (!array)
		return (NULL);
	if (mallocassign(array, s, c) != 0)
		copy(array, s, c);
	else
	{
		free(array);
		return (NULL);
	}
	array[nmstr + 1] = NULL;
	return (array);
}